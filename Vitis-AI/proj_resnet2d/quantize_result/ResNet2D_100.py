# GENETARED BY NNDCT, DO NOT EDIT!

import torch
from torch import tensor
import pytorch_nndct as py_nndct

class ResNet2D_100(py_nndct.nn.NndctQuantModel):
    def __init__(self):
        super(ResNet2D_100, self).__init__()
        self.module_0 = py_nndct.nn.Input() #ResNet2D_100::input_0(ResNet2D_100::nndct_input_0)
        self.module_1 = py_nndct.nn.Conv2d(in_channels=1, out_channels=128, kernel_size=[3, 7], stride=[1, 2], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Conv2d[conv1]/ret.3(ResNet2D_100::nndct_conv2d_1)
        self.module_2 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/ReLU[relu]/6151(ResNet2D_100::nndct_relu_2)
        self.module_3 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[0]/Conv2d[conv1]/ret.7(ResNet2D_100::nndct_conv2d_3)
        self.module_4 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[0]/ReLU[relu]/6179(ResNet2D_100::nndct_relu_4)
        self.module_5 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[0]/Conv2d[conv2]/ret.11(ResNet2D_100::nndct_conv2d_5)
        self.module_6 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[0]/6209(ResNet2D_100::nndct_elemwise_add_6)
        self.module_7 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[0]/ReLU[relu]/6210(ResNet2D_100::nndct_relu_7)
        self.module_8 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[1]/Conv2d[conv1]/ret.15(ResNet2D_100::nndct_conv2d_8)
        self.module_9 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[1]/ReLU[relu]/6238(ResNet2D_100::nndct_relu_9)
        self.module_10 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[1]/Conv2d[conv2]/ret.19(ResNet2D_100::nndct_conv2d_10)
        self.module_11 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[1]/6268(ResNet2D_100::nndct_elemwise_add_11)
        self.module_12 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[1]/ReLU[relu]/6269(ResNet2D_100::nndct_relu_12)
        self.module_13 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[2]/Conv2d[conv1]/ret.23(ResNet2D_100::nndct_conv2d_13)
        self.module_14 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[2]/ReLU[relu]/6297(ResNet2D_100::nndct_relu_14)
        self.module_15 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[2]/Conv2d[conv2]/ret.27(ResNet2D_100::nndct_conv2d_15)
        self.module_16 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[2]/6327(ResNet2D_100::nndct_elemwise_add_16)
        self.module_17 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer1]/BasicBlock2D[2]/ReLU[relu]/6328(ResNet2D_100::nndct_relu_17)
        self.module_18 = py_nndct.nn.Conv2d(in_channels=128, out_channels=256, kernel_size=[3, 7], stride=[1, 2], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[0]/Conv2d[conv1]/ret.31(ResNet2D_100::nndct_conv2d_18)
        self.module_19 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[0]/ReLU[relu]/6356(ResNet2D_100::nndct_relu_19)
        self.module_20 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[0]/Conv2d[conv2]/ret.35(ResNet2D_100::nndct_conv2d_20)
        self.module_21 = py_nndct.nn.Conv2d(in_channels=128, out_channels=256, kernel_size=[1, 1], stride=[1, 2], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[0]/Sequential[downsample]/Conv2d[0]/ret.39(ResNet2D_100::nndct_conv2d_21)
        self.module_22 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[0]/6412(ResNet2D_100::nndct_elemwise_add_22)
        self.module_23 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[0]/ReLU[relu]/6413(ResNet2D_100::nndct_relu_23)
        self.module_24 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[1]/Conv2d[conv1]/ret.43(ResNet2D_100::nndct_conv2d_24)
        self.module_25 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[1]/ReLU[relu]/6441(ResNet2D_100::nndct_relu_25)
        self.module_26 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[1]/Conv2d[conv2]/ret.47(ResNet2D_100::nndct_conv2d_26)
        self.module_27 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[1]/6471(ResNet2D_100::nndct_elemwise_add_27)
        self.module_28 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[1]/ReLU[relu]/6472(ResNet2D_100::nndct_relu_28)
        self.module_29 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[2]/Conv2d[conv1]/ret.51(ResNet2D_100::nndct_conv2d_29)
        self.module_30 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[2]/ReLU[relu]/6500(ResNet2D_100::nndct_relu_30)
        self.module_31 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[2]/Conv2d[conv2]/ret.55(ResNet2D_100::nndct_conv2d_31)
        self.module_32 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[2]/6530(ResNet2D_100::nndct_elemwise_add_32)
        self.module_33 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[2]/ReLU[relu]/6531(ResNet2D_100::nndct_relu_33)
        self.module_34 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[3]/Conv2d[conv1]/ret.59(ResNet2D_100::nndct_conv2d_34)
        self.module_35 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[3]/ReLU[relu]/6559(ResNet2D_100::nndct_relu_35)
        self.module_36 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[3]/Conv2d[conv2]/ret.63(ResNet2D_100::nndct_conv2d_36)
        self.module_37 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[3]/6589(ResNet2D_100::nndct_elemwise_add_37)
        self.module_38 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer2]/BasicBlock2D[3]/ReLU[relu]/6590(ResNet2D_100::nndct_relu_38)
        self.module_39 = py_nndct.nn.Conv2d(in_channels=256, out_channels=512, kernel_size=[3, 7], stride=[1, 2], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[0]/Conv2d[conv1]/ret.67(ResNet2D_100::nndct_conv2d_39)
        self.module_40 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[0]/ReLU[relu]/6618(ResNet2D_100::nndct_relu_40)
        self.module_41 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[0]/Conv2d[conv2]/ret.71(ResNet2D_100::nndct_conv2d_41)
        self.module_42 = py_nndct.nn.Conv2d(in_channels=256, out_channels=512, kernel_size=[1, 1], stride=[1, 2], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[0]/Sequential[downsample]/Conv2d[0]/ret.75(ResNet2D_100::nndct_conv2d_42)
        self.module_43 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[0]/6674(ResNet2D_100::nndct_elemwise_add_43)
        self.module_44 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[0]/ReLU[relu]/6675(ResNet2D_100::nndct_relu_44)
        self.module_45 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[1]/Conv2d[conv1]/ret.79(ResNet2D_100::nndct_conv2d_45)
        self.module_46 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[1]/ReLU[relu]/6703(ResNet2D_100::nndct_relu_46)
        self.module_47 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[1]/Conv2d[conv2]/ret.83(ResNet2D_100::nndct_conv2d_47)
        self.module_48 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[1]/6733(ResNet2D_100::nndct_elemwise_add_48)
        self.module_49 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[1]/ReLU[relu]/6734(ResNet2D_100::nndct_relu_49)
        self.module_50 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[2]/Conv2d[conv1]/ret.87(ResNet2D_100::nndct_conv2d_50)
        self.module_51 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[2]/ReLU[relu]/6762(ResNet2D_100::nndct_relu_51)
        self.module_52 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[2]/Conv2d[conv2]/ret.91(ResNet2D_100::nndct_conv2d_52)
        self.module_53 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[2]/6792(ResNet2D_100::nndct_elemwise_add_53)
        self.module_54 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[2]/ReLU[relu]/6793(ResNet2D_100::nndct_relu_54)
        self.module_55 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[3]/Conv2d[conv1]/ret.95(ResNet2D_100::nndct_conv2d_55)
        self.module_56 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[3]/ReLU[relu]/6821(ResNet2D_100::nndct_relu_56)
        self.module_57 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[3]/Conv2d[conv2]/ret.99(ResNet2D_100::nndct_conv2d_57)
        self.module_58 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[3]/6851(ResNet2D_100::nndct_elemwise_add_58)
        self.module_59 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[3]/ReLU[relu]/6852(ResNet2D_100::nndct_relu_59)
        self.module_60 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[4]/Conv2d[conv1]/ret.103(ResNet2D_100::nndct_conv2d_60)
        self.module_61 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[4]/ReLU[relu]/6880(ResNet2D_100::nndct_relu_61)
        self.module_62 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[4]/Conv2d[conv2]/ret.107(ResNet2D_100::nndct_conv2d_62)
        self.module_63 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[4]/6910(ResNet2D_100::nndct_elemwise_add_63)
        self.module_64 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[4]/ReLU[relu]/6911(ResNet2D_100::nndct_relu_64)
        self.module_65 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[5]/Conv2d[conv1]/ret.111(ResNet2D_100::nndct_conv2d_65)
        self.module_66 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[5]/ReLU[relu]/6939(ResNet2D_100::nndct_relu_66)
        self.module_67 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[5]/Conv2d[conv2]/ret.115(ResNet2D_100::nndct_conv2d_67)
        self.module_68 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[5]/6969(ResNet2D_100::nndct_elemwise_add_68)
        self.module_69 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer3]/BasicBlock2D[5]/ReLU[relu]/6970(ResNet2D_100::nndct_relu_69)
        self.module_70 = py_nndct.nn.Conv2d(in_channels=512, out_channels=1024, kernel_size=[3, 7], stride=[1, 2], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[0]/Conv2d[conv1]/ret.119(ResNet2D_100::nndct_conv2d_70)
        self.module_71 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[0]/ReLU[relu]/6998(ResNet2D_100::nndct_relu_71)
        self.module_72 = py_nndct.nn.Conv2d(in_channels=1024, out_channels=1024, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[0]/Conv2d[conv2]/ret.123(ResNet2D_100::nndct_conv2d_72)
        self.module_73 = py_nndct.nn.Conv2d(in_channels=512, out_channels=1024, kernel_size=[1, 1], stride=[1, 2], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[0]/Sequential[downsample]/Conv2d[0]/ret.127(ResNet2D_100::nndct_conv2d_73)
        self.module_74 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[0]/7054(ResNet2D_100::nndct_elemwise_add_74)
        self.module_75 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[0]/ReLU[relu]/7055(ResNet2D_100::nndct_relu_75)
        self.module_76 = py_nndct.nn.Conv2d(in_channels=1024, out_channels=1024, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[1]/Conv2d[conv1]/ret.131(ResNet2D_100::nndct_conv2d_76)
        self.module_77 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[1]/ReLU[relu]/7083(ResNet2D_100::nndct_relu_77)
        self.module_78 = py_nndct.nn.Conv2d(in_channels=1024, out_channels=1024, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[1]/Conv2d[conv2]/ret.135(ResNet2D_100::nndct_conv2d_78)
        self.module_79 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[1]/7113(ResNet2D_100::nndct_elemwise_add_79)
        self.module_80 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[1]/ReLU[relu]/7114(ResNet2D_100::nndct_relu_80)
        self.module_81 = py_nndct.nn.Conv2d(in_channels=1024, out_channels=1024, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[2]/Conv2d[conv1]/ret.139(ResNet2D_100::nndct_conv2d_81)
        self.module_82 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[2]/ReLU[relu]/7142(ResNet2D_100::nndct_relu_82)
        self.module_83 = py_nndct.nn.Conv2d(in_channels=1024, out_channels=1024, kernel_size=[3, 7], stride=[1, 1], padding=[1, 3], dilation=[1, 1], groups=1, bias=True) #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[2]/Conv2d[conv2]/ret.143(ResNet2D_100::nndct_conv2d_83)
        self.module_84 = py_nndct.nn.Add() #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[2]/7172(ResNet2D_100::nndct_elemwise_add_84)
        self.module_85 = py_nndct.nn.ReLU(inplace=True) #ResNet2D_100::ResNet2D_100/Sequential[layer4]/BasicBlock2D[2]/ReLU[relu]/7173(ResNet2D_100::nndct_relu_85)
        self.module_86 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #ResNet2D_100::ResNet2D_100/AdaptiveAvgPool2d[avgpool]/7190(ResNet2D_100::nndct_adaptive_avg_pool2d_86)
        self.module_87 = py_nndct.nn.Module('nndct_shape') #ResNet2D_100::ResNet2D_100/7193(ResNet2D_100::nndct_shape_87)
        self.module_88 = py_nndct.nn.Module('nndct_reshape') #ResNet2D_100::ResNet2D_100/ret.149(ResNet2D_100::nndct_reshape_88)
        self.module_89 = py_nndct.nn.Linear(in_features=1024, out_features=5, bias=True) #ResNet2D_100::ResNet2D_100/Linear[fc]/ret(ResNet2D_100::nndct_dense_89)

    @py_nndct.nn.forward_processor
    def forward(self, *args):
        output_module_0 = self.module_0(input=args[0])
        output_module_0 = self.module_1(output_module_0)
        output_module_0 = self.module_2(output_module_0)
        output_module_3 = self.module_3(output_module_0)
        output_module_3 = self.module_4(output_module_3)
        output_module_3 = self.module_5(output_module_3)
        output_module_3 = self.module_6(input=output_module_3, other=output_module_0, alpha=1)
        output_module_3 = self.module_7(output_module_3)
        output_module_8 = self.module_8(output_module_3)
        output_module_8 = self.module_9(output_module_8)
        output_module_8 = self.module_10(output_module_8)
        output_module_8 = self.module_11(input=output_module_8, other=output_module_3, alpha=1)
        output_module_8 = self.module_12(output_module_8)
        output_module_13 = self.module_13(output_module_8)
        output_module_13 = self.module_14(output_module_13)
        output_module_13 = self.module_15(output_module_13)
        output_module_13 = self.module_16(input=output_module_13, other=output_module_8, alpha=1)
        output_module_13 = self.module_17(output_module_13)
        output_module_18 = self.module_18(output_module_13)
        output_module_18 = self.module_19(output_module_18)
        output_module_18 = self.module_20(output_module_18)
        output_module_21 = self.module_21(output_module_13)
        output_module_18 = self.module_22(input=output_module_18, other=output_module_21, alpha=1)
        output_module_18 = self.module_23(output_module_18)
        output_module_24 = self.module_24(output_module_18)
        output_module_24 = self.module_25(output_module_24)
        output_module_24 = self.module_26(output_module_24)
        output_module_24 = self.module_27(input=output_module_24, other=output_module_18, alpha=1)
        output_module_24 = self.module_28(output_module_24)
        output_module_29 = self.module_29(output_module_24)
        output_module_29 = self.module_30(output_module_29)
        output_module_29 = self.module_31(output_module_29)
        output_module_29 = self.module_32(input=output_module_29, other=output_module_24, alpha=1)
        output_module_29 = self.module_33(output_module_29)
        output_module_34 = self.module_34(output_module_29)
        output_module_34 = self.module_35(output_module_34)
        output_module_34 = self.module_36(output_module_34)
        output_module_34 = self.module_37(input=output_module_34, other=output_module_29, alpha=1)
        output_module_34 = self.module_38(output_module_34)
        output_module_39 = self.module_39(output_module_34)
        output_module_39 = self.module_40(output_module_39)
        output_module_39 = self.module_41(output_module_39)
        output_module_42 = self.module_42(output_module_34)
        output_module_39 = self.module_43(input=output_module_39, other=output_module_42, alpha=1)
        output_module_39 = self.module_44(output_module_39)
        output_module_45 = self.module_45(output_module_39)
        output_module_45 = self.module_46(output_module_45)
        output_module_45 = self.module_47(output_module_45)
        output_module_45 = self.module_48(input=output_module_45, other=output_module_39, alpha=1)
        output_module_45 = self.module_49(output_module_45)
        output_module_50 = self.module_50(output_module_45)
        output_module_50 = self.module_51(output_module_50)
        output_module_50 = self.module_52(output_module_50)
        output_module_50 = self.module_53(input=output_module_50, other=output_module_45, alpha=1)
        output_module_50 = self.module_54(output_module_50)
        output_module_55 = self.module_55(output_module_50)
        output_module_55 = self.module_56(output_module_55)
        output_module_55 = self.module_57(output_module_55)
        output_module_55 = self.module_58(input=output_module_55, other=output_module_50, alpha=1)
        output_module_55 = self.module_59(output_module_55)
        output_module_60 = self.module_60(output_module_55)
        output_module_60 = self.module_61(output_module_60)
        output_module_60 = self.module_62(output_module_60)
        output_module_60 = self.module_63(input=output_module_60, other=output_module_55, alpha=1)
        output_module_60 = self.module_64(output_module_60)
        output_module_65 = self.module_65(output_module_60)
        output_module_65 = self.module_66(output_module_65)
        output_module_65 = self.module_67(output_module_65)
        output_module_65 = self.module_68(input=output_module_65, other=output_module_60, alpha=1)
        output_module_65 = self.module_69(output_module_65)
        output_module_70 = self.module_70(output_module_65)
        output_module_70 = self.module_71(output_module_70)
        output_module_70 = self.module_72(output_module_70)
        output_module_73 = self.module_73(output_module_65)
        output_module_70 = self.module_74(input=output_module_70, other=output_module_73, alpha=1)
        output_module_70 = self.module_75(output_module_70)
        output_module_76 = self.module_76(output_module_70)
        output_module_76 = self.module_77(output_module_76)
        output_module_76 = self.module_78(output_module_76)
        output_module_76 = self.module_79(input=output_module_76, other=output_module_70, alpha=1)
        output_module_76 = self.module_80(output_module_76)
        output_module_81 = self.module_81(output_module_76)
        output_module_81 = self.module_82(output_module_81)
        output_module_81 = self.module_83(output_module_81)
        output_module_81 = self.module_84(input=output_module_81, other=output_module_76, alpha=1)
        output_module_81 = self.module_85(output_module_81)
        output_module_86 = self.module_86(output_module_81)
        output_module_87 = self.module_87(input=output_module_81, dim=0)
        output_module_86 = self.module_88(input=output_module_86, shape=[output_module_87,-1])
        output_module_86 = self.module_89(output_module_86)
        return output_module_86
